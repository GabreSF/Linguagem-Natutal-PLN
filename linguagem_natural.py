# -*- coding: utf-8 -*-
"""Linguagem-Natural.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IAEb2AyYvU7bo1w9RsTt_3iTGV5k3Ezo

**Processamento de Linguagem Natural com Python**

**Bibliotecas utilizadas**
"""

import bs4 as bs
import urllib.request
import nltk
import spacy

!python3 -m spacy download pt

"""**Fonte dos dados**

[**Fonte**](https://pt.wikipedia.org/wiki/Processamento_de_linguagem_natural)
"""

dados = urllib.request.urlopen('https://pt.wikipedia.org/wiki/Processamento_de_linguagem_natural')

dados = dados.read()
dados

dados_html = bs.BeautifulSoup(dados, 'lxml')
dados_html

paragrafos = dados_html.find_all('p')

len(paragrafos)

conteudo = ''
for p in paragrafos:
    conteudo += p.text

conteudo

conteudo = conteudo.lower()
conteudo

"""**Utilizando o SpaCy Para buscas em Texto**"""

pln = spacy.load('pt')

string = 'pln'
token_pesquisa = pln(string)

pln.vocab

from spacy.matcher import PhraseMatcher
matcher = PhraseMatcher(pln.vocab)
matcher.add('BUSCA', None, token_pesquisa)

doc = pln(conteudo)
matches = matcher(doc)
matches

doc[13:14], doc[13-3: 14+8]

from IPython.core.display import HTML
texto = ''
numero_palavras = 60
doc = pln(conteudo)
matches = matcher(doc)

display(HTML(f'<h1>{string.upper()}</h1>'))
display(HTML(f"""<p><strong>Resultados Encontrados:</strong> {len(matches)}</p>"""))
for i in matches:
  inicio = i[1] - numero_palavras
  if inicio < 0:
    inicio = 0
  texto += str(doc[inicio:i[2] + numero_palavras]).replace(string, f"<mark>{string}</mark>")
  texto += "<br /><br />"
display(HTML(f"""... {texto} ... """))

"""**Extração de Entidades Nomeadas**"""

from spacy import displacy
displacy.render(doc, style = 'ent', jupyter = True)

"""**Nuvem de palavras e Stop Words**"""

from spacy.lang.pt.stop_words import STOP_WORDS
print(STOP_WORDS)

len(STOP_WORDS)

doc = pln(conteudo)
lista_token = []
for token in doc:
  lista_token.append(token.text)

len(lista_token)

sem_stop = []
for palavra in lista_token:
  if pln.vocab[palavra].is_stop == False:
    sem_stop.append(palavra)

len(sem_stop)

from matplotlib.colors import ListedColormap
color_map = ListedColormap(['red', 'blue', 'gray', 'magenta'])

from wordcloud import WordCloud
cloud = WordCloud(background_color = 'white', max_words = 100, colormap=color_map)

import matplotlib.pyplot as plt
cloud = cloud.generate(' '.join(sem_stop))
plt.figure(figsize=(18,18))
plt.imshow(cloud)
plt.axis('off')
plt.show()